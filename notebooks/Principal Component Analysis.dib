#!markdown

# Take home Examination (Practical): Principal component Analysis, (PCA)

#!markdown

## 1 - Importing all the model/libraries required

#!fsharp

#r "nuget:FsLab"

#!fsharp

// for dataframe manipulation = Pandas
open Deedle 
// for matrix calculation = numpy
open MathNet.Numerics 
open MathNet.Numerics.LinearAlgebra
open MathNet.Numerics.Statistics
// for ploting = matplotlib
open XPlot.Plotly
// Array manipulation
open System.Linq

#!markdown

## 2 - Load and prepare the data set

#!fsharp

[<Literal>]
let DATASET_LINK = __SOURCE_DIRECTORY__ + "/iris.data.csv"

let dataset = Frame.ReadCsv(path=DATASET_LINK)

#!markdown

## 3 - Visualization via Histograms

#!markdown

### Histograms For Sepal Length

#!fsharp

let sepalLengthIrisSetosa = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalLength"].["Iris-setosa",*])
    |> Series.values

let sepalLengthIrisVersicolor = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalLength"].["Iris-versicolor",*])
    |> Series.values

let sepalLengthIrisVirginica = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalLength"].["Iris-virginica",*])
    |> Series.values

#!fsharp

let sepalLengthIrisSetosaTrace =
    Histogram(
        name = "Iris Setosa",
        x = sepalLengthIrisSetosa,
        opacity = 0.75
    )

let sepalLengthIrisVersicolorTrace =
    Histogram(
        name = "Iris Versicolor",
        x = sepalLengthIrisVersicolor,
        opacity = 0.75
    )

let sepalLengthIrisVirginicaTrace =
    Histogram(
        name = "Iris Virginica",
        x = sepalLengthIrisVirginica,
        opacity = 0.75
    )

let overlaidLayout =
    Layout(
        title = "Iris Flowers - Sepal Length",
        barmode = "Iris Flowers"
    )

[sepalLengthIrisSetosaTrace;sepalLengthIrisVersicolorTrace;sepalLengthIrisVirginicaTrace]
|> Chart.Plot
|> Chart.WithLayout overlaidLayout
|> Chart.WithWidth 700
|> Chart.WithHeight 500

#!markdown

### Histograms For  Sepal Width

#!fsharp

let sepalWidthIrisSetosa = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalWidth"].["Iris-setosa",*])
    |> Series.values

let sepalWidthIrisVersicolor = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalWidth"].["Iris-versicolor",*])
    |> Series.values

let sepalWidthIrisVirginica = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["sepalWidth"].["Iris-virginica",*])
    |> Series.values

#!fsharp

let sepalWidthIrisSetosaTrace =
    Histogram(
        name = "Iris Setosa",
        x = sepalWidthIrisSetosa,
        opacity = 0.75
    )

let sepalWidthIrisVersicolorTrace =
    Histogram(
        name = "Iris Versicolor",
        x = sepalWidthIrisVersicolor,
        opacity = 0.75
    )

let sepalWidthIrisVirginicaTrace =
    Histogram(
        name = "Iris Virginica",
        x = sepalWidthIrisVirginica,
        opacity = 0.75
    )

let overlaidLayout =
    Layout(
        title = "Iris Flowers - Sepal Width",
        barmode = "Iris Flowers"
    )

[sepalWidthIrisSetosaTrace;sepalWidthIrisVersicolorTrace;sepalWidthIrisVirginicaTrace]
|> Chart.Plot
|> Chart.WithLayout overlaidLayout
|> Chart.WithWidth 700
|> Chart.WithHeight 500

#!markdown

### Histograms For  Petal Length

#!fsharp

let petalLengthIrisSetosa = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalLength"].["Iris-setosa",*])
    |> Series.values

let petalLengthIrisVersicolor = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalLength"].["Iris-versicolor",*])
    |> Series.values

let petalLengthIrisVirginica = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalLength"].["Iris-virginica",*])
    |> Series.values

#!fsharp

let petalLengthIrisSetosaTrace =
    Histogram(
        name = "Iris Setosa",
        x = petalLengthIrisSetosa,
        opacity = 0.75
    )

let petalLengthIrisVersicolorTrace =
    Histogram(
        name = "Iris Versicolor",
        x = petalLengthIrisVersicolor,
        opacity = 0.75
    )

let petalLengthIrisVirginicaTrace =
    Histogram(
        name = "Iris Virginica",
        x = petalLengthIrisVirginica,
        opacity = 0.75
    )

let overlaidLayout =
    Layout(
        title = "Iris Flowers - Petal Length",
        barmode = "Iris Flowers"
    )

[sepalWidthIrisSetosaTrace;sepalWidthIrisVersicolorTrace;sepalWidthIrisVirginicaTrace]
|> Chart.Plot
|> Chart.WithLayout overlaidLayout
|> Chart.WithWidth 700
|> Chart.WithHeight 500

#!markdown

### Histograms For Petal Width 

#!fsharp

let petalWidthIrisSetosa = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalWidth"].["Iris-setosa",*])
    |> Series.values

let petalWidthIrisVersicolor = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalWidth"].["Iris-versicolor",*])
    |> Series.values

let petalWidthIrisVirginica = 
    dataset
    |> Frame.groupRowsByString "class"
    |> (fun v -> v.Columns.["petalWidth"].["Iris-virginica",*])
    |> Series.values

#!fsharp

let petalWidthIrisSetosaTrace = Histogram(name = "Iris Setosa", x = petalWidthIrisSetosa, opacity = 0.75)

let petalWidthIrisVersicolorTrace = Histogram(name = "Iris Versicolor", x = petalWidthIrisVersicolor, opacity = 0.75)

let petalWidthIrisVirginicaTrace = Histogram(name = "Iris Virginica", x = petalWidthIrisVirginica, opacity = 0.75)

let overlaidLayout = Layout(title = "Iris Flowers - Petal Width")

[petalWidthIrisSetosaTrace;petalWidthIrisVersicolorTrace;petalWidthIrisVirginicaTrace]
|> Chart.Plot
|> Chart.WithLayout overlaidLayout
|> Chart.WithWidth 700
|> Chart.WithHeight 500

#!markdown

## 4 - Perform Standardization

#!fsharp

let normalizedMatrix = 
    let (mu,std) = (dataset |> Stats.mean, dataset |> Stats.stdDev)
    
    dataset
    |> Frame.dropCol "class"
    |> Frame.mapRowValues (fun row -> (row.As<float>() - mu) / std)
    |> Frame.ofRows
    |> Frame.toArray2D 
    |> DenseMatrix.ofArray2
    |> (fun m -> m.[*,0..3])

#!markdown

## 5 - Compute the Eigenvectors and Eigenvalues

#!markdown

* Function to calculate the Covariance Matrix

#!fsharp

let covariance matrix = 
    let columnAverages = 
        Matrix.sumCols matrix / float matrix.RowCount
    let centered = 
        matrix
        |> Matrix.mapCols
            (fun i vec -> vec - columnAverages.[i])
    let normalizationFactor = 
        if matrix.RowCount = 1 then 1 
        else matrix.RowCount - 1
    centered.TransposeThisAndMultiply centered / float normalizationFactor
    

#!fsharp

let covarianceMatrix = (covariance normalizedMatrix)

let eigen = covarianceMatrix.Evd()

#!markdown

## 6 - Display the covariance matrix, Eigenvectors and Eigenvalues

#!fsharp

printfn "The Covariance Matrix: %O" covarianceMatrix

#!fsharp

let eigenVectors = eigen.EigenVectors
printfn "The Eigen Vectors: %O" eigenVectors

#!fsharp

let eigenValues = eigen.EigenValues.Real()
printfn "The Eigen Values: %O" eigenValues

#!markdown

## 7 - Compute the PCA of the of the scaled data

#!fsharp

let variancePrecentage = eigenValues.[3] / eigenValues.Sum()

variancePrecentage // eigenValues of 3 is the largest hence we will choose the associated vector

#!fsharp

let newCorrdnate = 
    let pc1 = normalizedMatrix * eigenVectors.[3,*] |> Series.ofValues
    let y = DenseVector.create pc1.ValueCount 0.0 |> Series.ofValues
    let class' = dataset.Columns.["class"].Values |> Series.ofValues

    let df = Frame.ofColumns ["PC1" => pc1; "Y" => y]
    df?class' <- class'
    df


newCorrdnate.Columns.Observations

#!markdown

## 8 - Display the output for visualization and show the PCA components

#!fsharp

let pcaIrisSetosa = 
    newCorrdnate
    |> Frame.groupRowsByString "class'"
    |> (fun v -> v.Columns.["PC1"].["Iris-setosa",*])
    |> Series.values

let pcaIrisVersicolor = 
    newCorrdnate
    |> Frame.groupRowsByString "class'"
    |> (fun v -> v.Columns.["PC1"].["Iris-versicolor",*])
    |> Series.values

let pcaIrisVirginica = 
    newCorrdnate
    |> Frame.groupRowsByString "class'"
    |> (fun v -> v.Columns.["PC1"].["Iris-virginica",*])
    |> Series.values

let yAxis = 
    newCorrdnate
    |> Frame.groupRowsByString "class'"
    |> (fun v -> v.Columns.["Y"].["Iris-virginica",*])
    |> Series.values

#!fsharp

let marker = 
    Marker (
        size = 15
    )

let pcaIrisSetosaTrace = Scatter(name = "Iris Setosa",mode="markers", marker = marker, x = pcaIrisSetosa,y = yAxis, opacity = 0.75)

let pcaIrisVersicolorTrace = Scatter(name = "Iris Versicolor",mode="markers", marker = marker, x = pcaIrisVersicolor,y = yAxis, opacity = 0.75)

let pcaIrisVirginicaTrace = Scatter(name = "Iris Virginica",mode="markers", marker = marker, x = pcaIrisVirginica,y = yAxis, opacity = 0.75)

let overlaidLayout = Layout(title = "Iris Flowers - Petal Width")

[pcaIrisSetosaTrace;pcaIrisVersicolorTrace;pcaIrisVirginicaTrace]
|> Chart.Plot
|> Chart.WithLayout overlaidLayout
|> Chart.WithWidth 700
|> Chart.WithHeight 500
